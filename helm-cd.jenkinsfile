// 加载共享库
@Library("mylib@main") _

// 导入库

import org.devops.Checkout
import org.devops.GitLab
import org.devops.Kubernetes

// New实例化
def checkout = new Checkout()
def gitlab = new GitLab()
def kubernetes = new Kubernetes()
pipeline {
    agent {
        label "k8s"
    }

    options {
        skipDefaultCheckout true
        buildDiscarder logRotator(daysToKeepStr: '30', numToKeepStr: '30')
    }

    parameters {
        string defaultValue: 'RELEASE-1.1.1', description: '注意：选择应用发布分支', name: 'branchName'
        string defaultValue: 'f0b54c03-789d-4ca4-847d-29f83236ef8a', description: '访问凭据-GitLab', name: 'credentialsId'
        string defaultValue: 'http://192.168.20.194/devops/devops-k8s-deployment.git', description: '注意：Helm Chart仓库地址', name: 'helmSrcUrl'
        string defaultValue: 'main', description: '注意：Helm Chart分支名称', name: 'helmBranchName'
        choice choices: ['devops.maven.service', 'devops.ui.service'], description: '服务访问的域名', name: 'domainName'
        string defaultValue: '8080', description: '注意：服务监听的端口号', name: 'port'
    }

    stages {
        stage("Global") {
            steps {
                script {
                    // 任务名称截取构建类型（任务名称示例：devops-maven-service）
//                    env.buildType = "${JOB_NAME}".split("-")[1]
                    // JOB任务前缀（业务名称/组名称）
                    env.buName = "${JOB_NAME}".split('-')[0]
                    // 服务/项目名称
                    env.serviceName = "${JOB_NAME}".split('_')[0]
                    // GitLab用户Token访问凭据Id
                    env.gitlabUserTokenCredentialsId = "926a978a-5cef-49ca-8ff8-5351ed0700bf"
                    // Git项目Id
                    env.projectId = gitlab.GetProjectId("${env.gitlabUserTokenCredentialsId}", "${env.buName}", "${env.serviceName}")
                    // Git提交ID
                    env.commitId = gitlab.GetShortCommitIdByApi("${env.gitlabUserTokenCredentialsId}", "${env.projectId}", "${env.branchName}")
                    // 服务版本号（推荐定义："${branchName}-${commitId}"）
                    env.version = "${env.branchName}-${env.commitId}"

                    // 修改Jenkins构建描述
                    currentBuild.description = """ branchName：${env.branchName} \n commitId：${env.commitId} \n namespace：${env.buName} \n """
                    // 修改Jenkins构建名称
                    currentBuild.displayName = "${env.version}"
                }
            }
        }

        stage("Checkout") {
            steps {
                script {
                    sh "[ -d ${env.serviceName} ] || mkdir ${env.serviceName}"
                    ws("${WORKSPACE}/${env.serviceName}") {
                        checkout.GetCode("${env.helmSrcUrl}", "${env.helmBranchName}", "${env.credentialsId}")
                    }
                }
            }
        }

        stage("HelmReleaseFile") {
            steps {
                script {
                    // Git文件模板名称
                    fileName = "values.yaml"
                    // Git模板文件路径：项目服务名称_Helm/values.yaml
                    filePath = "${env.serviceName}/${env.serviceName}_Helm/${fileName}"
                    // Kubernetes发布模板文件内容替换
                    kubernetes.HelmReleaseTemplateFileReplace("${filePath}", "${env.domainName}", "${env.port}")
                }
            }
        }

        stage("HelmDeploy") {
            steps {
                script {
                    kubernetes.HelmDeploy("${env.buName}", "${env.serviceName}/${env.serviceName}_Helm", "${env.serviceName}")
                }
            }
        }

        stage("HealthCheck") {
            steps {
                script {
                    // 注意：自定义域名需配置Hosts文件！
                    result = sh returnStdout: true, script: """ curl "http://${env.domainName}/health" """ - "\n"
                    if ("ok" == result) {
                        println("Successful！")
                    }
                }
            }
        }

        stage("RollOut") {
            input {
                message "是否进行回滚"
                ok "提交"
                submitter "admin,myst"
                parameters {
                    choice(choices: ['no', 'yes'], name: 'opts')
                }
            }

            steps {
                script {
                    switch ("${opts}") {
                        case "yes":
                            // 注意：声明式：input {} 中 choices 无法获取变量值，所以此处改为脚本式
                            def result = input message: "选择回滚版本?",
                                    parameters: [choice(choices: "${env.REVISION}", name: 'revision')]
                            println("选择回滚版本：${result}")
                            sh "helm rollback ${env.serviceName} ${result} -n ${env.buName}"
                            break
                        case "no":
                            break
                    }
                }
            }
        }

    }

    post {
        always {
            // clean workspace build
            cleanWs()
        }
    }

}