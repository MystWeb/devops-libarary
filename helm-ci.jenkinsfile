// 加载共享库
@Library("mylib@main") _

// 导入库
import org.devops.*

// New实例化
def checkout = new Checkout()
def build = new Build()
def notice = new Notice()
def unitTest = new UnitTest()
def custom = new Custom()
def codeScan = new CodeScan()
def gitlab = new GitLab()
def artifact = new Artifact()
def docker = new Docker()
def kubernetes = new Kubernetes()

// 流水线
pipeline {
    agent { label "build" }

    options {
        skipDefaultCheckout true
        buildDiscarder logRotator(daysToKeepStr: '30', numToKeepStr: '30')
    }

    parameters {
        string defaultValue: 'http://192.168.100.150/proaim/trinity-service.git', description: '仓库地址', name: 'srcUrl'
        string defaultValue: 'RELEASE-1.2.0', description: '分支名称', name: 'branchName'
        choice choices: ['maven', 'custom', 'mavenSkip', 'gradle', 'ant', 'go', 'npm', 'npmSkip', 'yarn'], description: '构建类型', name: 'buildType'
        string defaultValue: '', name: 'customBuild', description: '自定义构建命令（示例：mvn clean package -Dpmd.skip=true -Dcheckstyle.skip=true -DskipTests && mvn test）'
        choice choices: ['false', 'true'], description: '是否跳过代码扫描', name: 'skipSonar'
    }

    stages {
        stage("Checkout") {
            steps {
                script {
                    println("Checkout")
                    // GitLab访问凭据Id：GitLab-admin-账号密码（192.168.100.150）
                    env.credentialsId = "6271c438-8197-4392-a45e-94efd9f7afa3"
                    checkout.GetCode("${env.srcUrl}", "${env.branchName}", "${env.credentialsId}")
                }
            }
        }

        stage("Global") {
            steps {
                script {
                    // 任务名称截取构建类型（任务名称示例：devops-maven-service）
//                    env.buildType = "${JOB_NAME}".split("-")[1]
                    // Git提交ID
                    env.commitId = gitlab.GetShortCommitIdByEightDigit()
                    // JOB任务前缀（业务名称/组名称）
                    env.buName = "${JOB_NAME}".split('-')[0]
                    // 服务/项目名称
                    env.serviceName = "${JOB_NAME}".split('_')[0]
                    // 服务版本号（推荐定义："${branchName}-${commitId}"）
                    env.version = "${env.branchName}-${env.commitId}"

                    // 制品仓库地址
                    env.artifactRegistry = "192.168.100.150:8081"
                    // 制品仓库访问凭据Id：Nexus-admin-账号密码（192.168.100.150:8081）
                    env.artifactCredentialsId = "adfe55cc-1f4a-444a-9c9f-7fc635c46a3c"
                    // 制品仓库名称
                    env.artifactRepository = "devops-artifacts"
                    // 镜像仓库地址
                    env.imageRegistry = "192.168.100.150:8082"
                    // 镜像仓库访问凭据Id：Harbor-admin-账号密码（192.168.100.150:8082）
                    env.imageRegistryCredentialsId = "cc81ccc9-962f-42ab-bbe6-fa9383c6938f"
                    // SonarQube访问凭据Id：SonarQube-admin-token（192.168.100.150:9000）
                    env.sonarqubeUserTokenCredentialsId = "c23d40dd-a6c8-4a17-a0d1-23dd795fe773"
                    // GitLab用户（Admin）Token访问凭据Id：GitLab-admin-token（192.168.100.150）
                    env.gitlabUserTokenCredentialsId = "07163983-8c80-4c4b-bd63-dc5261f23117"
                    // Git项目Id
                    env.projectId = gitlab.GetProjectId("${env.gitlabUserTokenCredentialsId}", "${env.buName}", "${env.serviceName}")

                    // 修改Jenkins构建描述
                    currentBuild.description = """ branchName：${env.branchName} \n commitId：${env.commitId} """
                    // 修改Jenkins构建名称
                    currentBuild.displayName = "${env.version}"
                }
            }
        }

        stage("Build") {
            steps {
                script {
                    println("Build")
                    if (null == "${env.customBuild}" || "${env.customBuild}".trim().length() <= 0) {
                        build.CodeBuild("${env.buildType}")
                    } else {
                        custom.CustomCommands("${env.customBuild}")
                    }
                }
            }
        }

        stage("UnitTest") {
            steps {
                script {
                    if ("${env.buildType}" == "custom") {
                        println("构建类型为：custom，跳过UnitTest阶段，如需单元测试请使用符号：&& 拼接命令")
                    } else {
                        println("UnitTest")
                        unitTest.CodeTest("${env.buildType}")
                    }
                }
            }
        }

        stage("CodeScan") {
            when {
                environment name: 'skipSonar', value: 'false'
            }
            steps {
                script {
                    println("CodeScan")
                    // 代码扫描 commit-status
                    codeScan.CodeScan_Sonar("${env.sonarqubeUserTokenCredentialsId}", "${env.gitlabUserTokenCredentialsId}",
                            "${env.branchName}", "${env.commitId}", "${env.projectId}")
                }
            }
        }

        // 上传制品（Format：raw）
        stage("PushArtifact") {
            steps {
                script {
                    // Dir：/buName/serviceName/branch-version/serviceName-version.suffix
                    // target/demo-0.0.1-SNAPSHOT.jar
                    if ("${env.buildType}" == "maven" || "${env.buildType}" == "mavenSkip") {
                        env.filePath = "target"
                        fileSuffix = "jar"
                        env.newFileName = "${env.serviceName}-${env.version}.${fileSuffix}"
                        // fileSuffix = env.fileName.split('\\.' as Closure)[-1]
                        originalFileName = sh returnStdout: true, script: "ls ${env.filePath} | grep -E ${fileSuffix}\$"
                        originalFileName = "${originalFileName}" - "\n"
                        // 重命名制品文件
                        sh "cd ${env.filePath} ; mv ${originalFileName} ${env.newFileName}"
                        // 上传制品
                        artifact.PushArtifactByApi("${env.artifactRegistry}", "${env.artifactCredentialsId}", "${env.artifactRepository}",
                                "${env.buName}/${env.serviceName}/${env.version}", "${env.buildType}", "${env.filePath}", "${env.newFileName}")
                    } else if ("${env.buildType}" == "npm" || "${env.buildType}" == "npmSkip") {
                        env.filePath = "dist"
                        fileSuffix = "zip"
                        env.newFileName = "${env.serviceName}-${env.version}.${fileSuffix}"
                        sh """
                            zip -r ${env.newFileName} ${env.filePath}
                            mv ${env.newFileName} ${env.filePath}
                        """
                        // 上传制品
                        artifact.PushArtifactByApi("${env.artifactRegistry}", "${env.artifactCredentialsId}", "${env.artifactRepository}",
                                "${env.buName}/${env.serviceName}/${env.version}", "${env.buildType}", "${env.filePath}", "${env.newFileName}")
                    } else {
                        env.result = sh returnStdout: true, script: "sh artifact.sh ${env.filePath} ${env.serviceName} ${env.version}" - "\n"
                        env.newFileName = "${env.result}" - "\n"
                        println("通过项目内自定义脚本上传制品")
                    }
                }
            }
        }

        stage("DockerBuild") {
            steps {
                script {
                    // imageTag："${env.branchName}-${env.commitId}"
                    env.imageName = "${env.buName}/${env.serviceName}"
                    docker.DockerBuildAndPushImage("${env.imageRegistry}", "${env.imageRegistryCredentialsId}",
                            "${env.imageName}", "${env.version}", "${env.filePath}", "${env.newFileName}")
                }
            }
        }

        stage("HelmReleaseFile") {
            steps {
                script {
                    // Git项目Id（devops-k8s-deployment）
                    k8sProjectId = gitlab.GetProjectId("${env.gitlabUserTokenCredentialsId}", "devops", "devops-k8s-deployment")
                    // Git文件模板名称
                    fileName = "values.yaml"
                    // Git上传文件路径：项目服务名称/values.yaml
                    filePath = "${env.serviceName}%2f${fileName}"
                    // 下载Kubernetes部署模板文件
                    fileData = gitlab.GetRepositoryFile("${env.gitlabUserTokenCredentialsId}", "${k8sProjectId}",
                            "${filePath}", "main")
                    // Kubernetes发布模板文件内容替换并转换Base64（imagePath：镜像仓库地址/镜像名称:镜像标签）
                    base64Content = kubernetes.HelmReleaseTemplateFileReplaceAndConvertToBase64("${fileName}", "${fileData}",
                            "${env.imageRegistry}/${env.imageName}", "${env.version}")

                    // 上传替换后的版本文件（新建文件或者更新文件）
                    // gitlab文件内容变更（URL编码转义符： %2f = / ）
                    try {
                        gitlab.CreateRepositoryFile("${env.gitlabUserTokenCredentialsId}", "${k8sProjectId}", "main", "${filePath}", "${base64Content}")
                    } catch (e) {
                        gitlab.UpdateRepositoryFile("${env.gitlabUserTokenCredentialsId}", "${k8sProjectId}", "main", "${filePath}", "${base64Content}")
                    }
                }
            }
        }

    }

    post {
        always {
            // Delete workspace when build is done
            cleanWs()
        }
    }

}